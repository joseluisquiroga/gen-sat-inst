
/*************************************************************

cardi.cpp 
(C) QUIROGA, Jose L. Bogota Colombia. South America

funcs for cardinality unsat instance generation 

----------------------------------------------

Given positive integers g, k, suppose the (2k - 2)g +1 propositional variables, p1 , p2 , ... , pH2 k - 2L g +1 , are partitioned, in order, into (g -1) sets of size (2k - 2) and one set of size (2k - 1). 

For each cell of the partition form all k-clauses from the variables in that cell and let C1 be the conjunction of all these k-clauses. If C1 is to be satisfiable no more than (k - 1) variables from each partition cell can be false; thus no more than (k - 1)g variables can be false.

Next let q1 , q2 , ... , qH2 k - 2L g +1 , be a random permutation of the p’s and again partition, in order, into (g -1) sets of size (2k - 2) and one set of size (2k - 1). 

This time, for each cell of the partition, form all k-clauses from the negated variables in that cell and let C2 be the conjunction of all these kclauses. If C2 is to be satisfiable, no more than (k - 1) variables from each partition cell can be true; thus no more than (k - 1)g variables can be true.

Let C be C1 ﬂ C2 . If C is to be satisfiable, both C1 and C2 must be satisfiable; thus no more than (k - 1)g variables can be false and (k - 1)g variables can be true. 

However, (k - 1)g + (k - 1)g = (2k - 2)g < (2k - 2)g +1 ! 

Thus C is an unsatisfiable cnf.

----------------------------------------------

(a ∨ b ∨ c) ∧ (a ∨ b ∨ d) ∧ (a ∨ c ∨ d) ∧ (b ∨ c ∨ d)

(a ∨ b ∨ c ∨ d) ∧ (a ∨ b ∨ c ∨ e) ∧ (a ∨ b ∨ d ∨ e) ∧ (a ∨ c ∨ d ∨ e) ∧ (b ∨ c ∨ d ∨ e)


--------------------------------------------------------------*/

#include <cassert>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>

#include "mer_twist.h"

#define CARRIAGE_RETURN		((char)13)

#define DBG_CK(prm) 	assert(prm)

#define MIN_NUM_VAR 5

std::string cardi_msg =
"gsat_cardi v0.1\n"
"(c) 2014. QUIROGA BELTRAN, Jose Luis. Bogota - Colombia.\n"
;

std::string cardi_help =
"params: <num_vars> [-h|-l|-p] [-k <init_str>]\n"
"\n"
"-h : help.\n"
"-p : print the cnf size generated by <num_vars>.\n"
"-l : all less than <num_vars>.\n"
"-k : use <init_str> to init the random generator.\n"
"\n"
;

class cardi_params {
public: 
	
	long num_var;
	bool all_less_than;
	mer_twist rand_gen;
	
	cardi_params(){
		num_var = 0;
		all_less_than = false;
		
		time_t tt = time(NULL);
		rand_gen.init_with_long((long)tt);
	}

	bool get_args(int argc, char** argv);

};

void
get_var_vec(std::vector<long>& all_var, int sz_arr, mer_twist* gg){
	all_var.clear();
	all_var.resize(sz_arr);
	for(int aa = 0; aa < sz_arr; aa++){
		all_var[aa] = (aa + 1);
	}
	if(gg != NULL){
		std::vector<long> all_sel;
		while(all_var.size() > 0){
			int idx_pop = (int)(gg->gen_rand_int32_ie(0, all_var.size()));
			int lst_idx = all_var.size() - 1;
			long tmp_val = all_var[lst_idx];
			long pop_val = all_var[idx_pop];
			all_var[idx_pop] = tmp_val;
			all_var.pop_back();
			
			all_sel.push_back(pop_val);
		}
		all_sel.swap(all_var);
	}
}

void
prt_4_neus_for(std::ostream& os, long v1, long v2, long v3, long v4){
	os << v2 << " " << v3 << " " << v4 << " " << 0 << std::endl;
	os << v1 << " " << v3 << " " << v4 << " " << 0 << std::endl;
	os << v1 << " " << v2 << " " << v4 << " " << 0 << std::endl;
	os << v1 << " " << v2 << " " << v3 << " " << 0 << std::endl;
}

void
prt_10_neus_for(std::ostream& os, long v1, long v2, long v3, long v4, long v5){
	os << v1  << " " << v2  << " " << v3 << " " << 0 << std::endl;
	os << v1  << " " << v2  << " " << v4 << " " << 0 << std::endl;
	os << v1  << " " << v2  << " " << v5 << " " << 0 << std::endl;
	os << v1  << " " << v3  << " " << v4 << " " << 0 << std::endl;
	os << v1  << " " << v3  << " " << v5 << " " << 0 << std::endl;
	os << v1  << " " << v4  << " " << v5 << " " << 0 << std::endl;
	os << v2  << " " << v3  << " " << v4 << " " << 0 << std::endl;
	os << v2  << " " << v3  << " " << v5 << " " << 0 << std::endl;
	os << v2  << " " << v4  << " " << v5 << " " << 0 << std::endl;
	os << v3  << " " << v4  << " " << v5 << " " << 0 << std::endl;
}

void
prt_neus(std::ostream& os, std::vector<long>& all_var, bool pos_side){
	//std::cout << "vec_sz=" << all_var.size() << std::endl;
	for(int aa = 0; aa < all_var.size(); aa += 4){
		DBG_CK((aa + 4) < all_var.size());
		bool is_last = ((aa + 5) == all_var.size());
		long v1 = all_var[aa];
		long v2 = all_var[aa + 1];
		long v3 = all_var[aa + 2];
		long v4 = all_var[aa + 3];
		if(! pos_side){
			v1 = -v1;
			v2 = -v2;
			v3 = -v3;
			v4 = -v4;
		}
		if(is_last){
			long v5 = all_var[aa + 4];
			if(! pos_side){ v5 = -v5; }
			prt_10_neus_for(os, v1, v2, v3, v4, v5);
			break;
		} else {
			prt_4_neus_for(os, v1, v2, v3, v4);
		}
	}
}

inline
long
get_num_grp(long num_var){
	if(num_var < 5){
		num_var = 5;
	}
	long num_g = ((num_var - 1)/4);
	return num_g;
}

inline
long
get_num_var(long num_grp){
	long num_neu = ((4 * num_grp) + 1);
	return num_neu;
}

inline
long
get_num_neu(long num_grp){
	long num_neu = 2 * ((4 * (num_grp - 1)) + 10);
	return num_neu;
}

std::ostream& 	
print_cardi_cnf(std::ostream& os, long num_var, long pos_skip, mer_twist& gg){
	long num_grp = get_num_grp(num_var);
	num_var = get_num_var(num_grp);
	long num_neu = get_num_neu(num_grp);
	long ii, jj, kk, hh1, hh2, pp;

	long num_neu_prt = num_neu;

	os << "c by QUIROGA, Jose. Bogota Colombia. South America."<< std::endl;
	os << "c cardinality instance ";
	os << "(unsat)";
	os << "(" << num_var << " vars)" << std::endl;
	os << "p cnf " << num_var << " " << num_neu_prt << std::endl;
	
	std::vector<long> var_neg;
	get_var_vec(var_neg, num_var, NULL);
	prt_neus(os, var_neg, false);
	
	std::vector<long> var_pos;
	get_var_vec(var_pos, num_var, &gg);
	prt_neus(os, var_pos, true);
	
	return os;
}

long	num_digits(long ii){
	double jj = ii;
	if(jj < 0){
		jj = -jj; 
	}
	long n_dig = 1;
	while((jj /= 10) > 1){
		n_dig++;
	}
	return n_dig;
}

void	get_name(std::string& inst_nam, long num_var, long digs_nm){
	std::string f_nam = "cardi_";	// by hole

	std::ostringstream out_nam;
	out_nam << f_nam;
	out_nam.width(digs_nm);
	out_nam.fill('0');
	out_nam << num_var;
	out_nam << ".dimacs";
	inst_nam = out_nam.str();
}

bool
cardi_params::get_args(int argc, char** argv)
{
	std::ostream& os = std::cout;

	bool prt_help = false;
	bool prt_cnf_sz = false;
	for(long ii = 1; ii < argc; ii++){
		std::string the_arg = argv[ii];
		if(strcmp(argv[ii], "-h") == 0){
			prt_help = true;
		} else if(strcmp(argv[ii], "-l") == 0){
			all_less_than = true;
		} else if(strcmp(argv[ii], "-p") == 0){
			prt_cnf_sz = true;
		} else if((strcmp(argv[ii], "-k") == 0) && ((ii + 1) < argc)){
			ii++;

			char* pp = argv[ii];
			int num_lg = strlen(pp) / sizeof(unsigned long);
			unsigned long* ini_arr = (unsigned long*)(pp);
			rand_gen.init_with_array(ini_arr, num_lg);
			
		} else if(num_var == 0){
			num_var = atol(argv[ii]);
		}
	}
	
	if(prt_help || (num_var == 0)){
		os << cardi_msg;
		os << cardi_help;
		return false;
	}
	
	if(num_var < MIN_NUM_VAR){
		num_var = MIN_NUM_VAR;
	}
	
	if(prt_cnf_sz){
		long num_cla = get_num_neu(num_var);
		os << "num clauses = " << num_cla << std::endl; 
		return false;
	}
	return true;
}

int 
main(int argc, char** argv){
	std::ostream& os = std::cout;
	
	cardi_params prms;
	bool go_on = prms.get_args(argc, argv);
	if(! go_on){
		return 0;
	}

	std::string inst_nam;

	long first = prms.num_var;
	long last = first + 1;
	long num_dig = num_digits(prms.num_var);
	if(prms.all_less_than){
		first = MIN_NUM_VAR;
	}

	for(long kk = first; kk < last; kk++){	
		get_name(inst_nam, kk, num_dig);

		std::ofstream ff;
		ff.open(inst_nam.c_str());
		if(ff.good() && ff.is_open()){
			print_cardi_cnf(ff, prms.num_var, -1, prms.rand_gen );
			ff.close();
			os << "Generating instance num_vars=" << kk << "." << std::endl;
		}
	}
	
	os << std::endl;
	return 0;
}

